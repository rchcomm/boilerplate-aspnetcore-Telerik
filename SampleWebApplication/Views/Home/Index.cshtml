@model bool

@{
    ViewData["Title"] = "Home Page";
}
@section scripts{
    <script>
        var dom = jQuery;
        var af = {};

        // af 기본 함수 스타트 각종 Init 및 bind 실행
        af.pageStart = function () {
            // 그리드 초기화
            af.gridView.initView();

            // 폼 초기화
            af.formView.initView();
        }

        // 그리드  view 설정
        af.gridView = {
            initView: function () {
                var _this = this;

                var crudServiceBaseUrl = "./api/grid";
                var dataSource = new kendo.data.DataSource({
                    serverFiltering: true,
                    serverPaging: true,
                    serverSorting: true,
                    //serverGrouping: true,
                    //serverAggregates: true,
                    page: 1,
                    pageSize: 20,
                    total: 0,
                    batch: true,
                    filter: [],
                    transport: {
                        read: {
                            url: crudServiceBaseUrl,
                            type: "GET",
                            dataType: "json",
                            contentType: 'application/json'
                        },
                        update: {
                            url: crudServiceBaseUrl,
                            type: "PUT",
                            dataType: "json",
                            contentType: 'application/json'
                        },
                        destroy: {
                            url: crudServiceBaseUrl,
                            type: "DELETE",
                            dataType: "json",
                            contentType: 'application/json'
                        },
                        create: {
                            url: crudServiceBaseUrl,
                            type: "POST",
                            dataType: "json",
                            contentType: 'application/json'
                        },
                        parameterMap: function (options, operation) {   // 파라메터 인자 정의
                            if (operation == "read") {
                                if (options.sort && options.sort.length > 0) {
                                    options.sort = options.sort[0].field + '-' + options.sort[0].dir;
                                }
                                return options;
                            } else if (options.models && options.models.length > 0) {
                                var model = options.models[0];
                                if (model.OrderId == undefined || model.OrderId == null) {
                                    model.OrderId = 0;
                                }
                                return kendo.stringify(model);
                            }
                        }
                    },
                    schema: {   // 데이터 스키마 정의
                        data: "Data",
                        total: 'Total',
                        errors: "Errors",
                        model: {
                            id: "OrderId",
                            fields: {                           // 데이터 컬럼 정의
                                OrderId: { type: "number", editable: false, nullable: true },
                                Freight: { type: "number", validation: { required: true, min: 1 }, defaultValue: 100 },
                                ShipName: { type: "string", defaultValue: 'ShipName', validation: { required: true } },
                                OrderDate: { type: "date", defaultValue: new Date(), validation: { required: true } },
                                ShipCity: { type: "string", defaultValue: 'ShipCity' }
                            }
                        }
                    }
                });

                this.target = dom("#grid1").kendoGrid({
                    //toolbar: ["create"],                        // 툴바 사용
                    //toolbar: [
                    //    { "name": "create", template: "<img class='k-grid-add' src='add.png'/>sdf" },
                    //    { "name": "save", template: "<img class='k-grid-save-changes' src='save.png'/>asdf" },
                    //    { "name": "cancel", template: "<img class='k-grid-cancel-changes' src='cancel.png'/>aaaaaaaa" }
                    //],
                    toolbar: [
                        { name: "create", text: "추가" },
                        { name: "cancel", text: "취소" }
                    ],
                    //scrollable: true,
                    dataSource: dataSource,                 //datasource를 사용하여 초기화
                    height: 550,
                    filterable: true,                           // 필터 사용 여부
                    sortable: true,                             // 정렬 사용 여부
                    selectable: true,                           // 선택 가능 여부, multiple row, multiple cell
                    editable: "popup",                      // 수정 모드
                    pageable: {
                        buttonCount: 7
                    },
                    filterable: {
                        messages: {
                            selectedItemsFormat: "{0} selected items"
                        }
                    },
                    columns: [                                  // 그리드 컬럼 정의
                        { title: "Order Id", field: "OrderId", filterable: false, encoded: true, width: "60px" },
                        { title: "Freight", field: "Freight", filterable: false, encoded: true , width: "100px"},
                        { title: "Order Date", field: "OrderDate", format: "{0:yyyy/MM/dd}", width: "120px" },
                        { title: "Ship Name", field: "ShipName", width: "150px" },
                        { title: "Ship City", field: "ShipCity", width: "150px" },
                        { command: ["edit", "destroy"], title: "&nbsp;", width: "250px" }
                    ],
                    // events
                    change: onChange,
                    dataBound: onDataBound,
                    dataBinding: onDataBinding,
                    sort: onSorting,
                    filter: onFiltering,
                    group: onGrouping,
                    page: onPaging,
                    groupExpand: onGroupExpand,
                    groupCollapse: onGroupCollapse,
                });

                function onChange(arg) {
                    var selected = $.map(this.select(), function (item) {
                        return $(item).text();
                    });

                    console.log("Selected: " + selected.length + " item(s), [" + selected.join(", ") + "]");
                }

                function onDataBound(arg) {
                    console.log("Grid data bound");
                }

                function onDataBinding(arg) {
                    console.log("Grid data binding");
                    // 이벤트 바인딩
                    af.buttonView.initView();
                }

                function onSorting(arg) {
                    console.log("Sorting on field: " + arg.sort.field + ", direction:" + (arg.sort.dir || "none"));
                }

                function onFiltering(arg) {
                    console.log("Filter on " + kendo.stringify(arg.filter));
                }

                function onPaging(arg) {
                    console.log("Paging to page index:" + arg.page);
                }

                function onGrouping(arg) {
                    console.log("Group on " + kendo.stringify(arg.groups));
                }

                function onGroupExpand(arg) {
                    console.log("The group to be expanded: " + kendo.stringify(arg.group));
                }

                function onGroupCollapse(arg) {
                    console.log("The group to be collapsed: " + kendo.stringify(arg.group));
                }
            }
        }

        // 폼 view 설정
        af.formView = {
            initView: function () {
                // kendoNumericTextBox
                dom("#Freight").kendoNumericTextBox({
                    format: "n2",
                    min: 1,
                    step: 1
                });

                // kendoDatePicker
                dom("#OrderDate").kendoDatePicker({
                    format: "yyyy/MM/dd",
                    animation: {
                        close: {
                            effects: "fadeOut zoom:out",
                            duration: 300
                        },
                        open: {
                            effects: "fadeIn zoom:in",
                            duration: 300
                        }
                    }
                });

                // kendoDropDownList -> 정의된 목록에서만 선택가능
                dom("#ShipName").kendoDropDownList({
                    dataSource: {
                        data: ["ShipName 159", "ShipName 166"]
                    },
                    animation: false
                });

                // kendoComboBox -> 사용자 정의 목록추가 가능
                dom("#ShipCity").kendoComboBox({
                    dataSource: {
                        data: ["ShipCity 159", "ShipCity 166"]
                    },
                    animation: false
                });

                // kendoAutoComplete
                dom("#AutoComplete").kendoAutoComplete({
                    autoWidth: true,
                    dataSource: {
                        data: ["hwshin", "rchcomm"]
                    },
                    animation: false
                });

                // kendoMultiSelect
                dom("#MultiSelect").kendoMultiSelect({
                    dataSource: {
                        data: ["hwshin", "rchcomm"]
                    },
                    animation: {
                        open: {
                            effects: "zoom:in",
                            duration: 300
                        }
                    }
                });
            }
        }

        // 폼 button view 설정
        af.buttonView = {
            list: [],
            initView: function () {
                this.list = af.gridView.target.data("kendoGrid").dataSource.view();
                this.eventBind();
            },
            eventBind: function () {
                var getData = this.getData.bind(this);
                dom("[data-button='save']").on("click", function () {
                    var list = getData();
                    console.log(list);
                    alert("grid data count=" + list.length);
                });
            },
            getData: function () {
                return this.list;
            }
        }
        $(function () {
            af.pageStart();
        });
    </script>
}
<div class="now">
    <div class="col-xs-12 col-md-6">
        <div id="grid1"></div>
    </div>
    <div class="col-xs-12 col-md-6">
        <form>
            <div class="form-group row">
                <label for="OrderId" class="col-sm-3 col-form-label">Order Id</label>
                <div class="col-sm-9">
                    <input type="text" readonly class="form-control" id="OrderId" value="3" style="width:85%" />
                </div>
            </div>
            <div class="form-group row">
                <label for="Freight" class="col-sm-3 col-form-label">Freight</label>
                <div class="col-sm-9">
                    <input type="text" class="form-control" id="Freight" value="1581" style="width:85%" />
                </div>
            </div>
            <div class="form-group row">
                <label for="OrderDate" class="col-sm-3 col-form-label">Order Date</label>
                <div class="col-sm-9">
                    <input class="form-control" id="OrderDate" value="2017-02-08" style="width:85%" />
                </div>
            </div>
            <div class="form-group row">
                <label for="ShipName" class="col-sm-3 col-form-label">Ship Name</label>
                <div class="col-sm-9">
                    <input type="text" class="form-control" id="ShipName" value="ShipName 159" style="width:85%" />
                </div>
            </div>
            <div class="form-group row">
                <label for="ShipCity" class="col-sm-3 col-form-label">Ship City</label>
                <div class="col-sm-9">
                    <input type="text" class="form-control" id="ShipCity" value="ShipCity 159" style="width:85%" />
                </div>
            </div>
            <div class="form-group row">
                <label for="AutoComplete" class="col-sm-3 col-form-label">AutoComplete</label>
                <div class="col-sm-9">
                    <input type="text" class="form-control" id="AutoComplete" value="" style="width:85%" />
                </div>
            </div>
            <div class="form-group row">
                <label for="MultiSelect" class="col-sm-3 col-form-label">MultiSelect</label>
                <div class="col-sm-9">
                    <select id="MultiSelect" multiple="multiple" style="width:85%">
                        <option>item1</option>
                        <option>item2</option>
                    </select>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-offset-3 col-sm-8">
                    <button type="button" class="btn btn-primary btn-block" data-button="save">
                        Save
                    </button>
                </div>
            </div>
        </form>
    </div>
</div>
<div class="now">
    <div class="col-xs-18 col-md-12">
    </div>
</div>

@Html.EditorFor(m => m)